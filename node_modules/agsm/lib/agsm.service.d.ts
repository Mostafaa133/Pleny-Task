import { Observable } from 'rxjs';
import { Action } from '../models/action.model';
import * as i0 from "@angular/core";
export declare class AgsmService {
    private store;
    private id;
    private devToolsId;
    private devToolsLink;
    private stateMap;
    private actionMap;
    private _store;
    constructor();
    /**
     * Adds a new reducer to the store
     * @param  {string} reducerName
     * @param  {(action:Action,initialState?:any)=>{}} reducerFunc
     * @returns void
     */
    addReducer(reducerName: string, reducerFunc: (action: Action, initialState?: any) => {}): void;
    /**
     * Dispatches actions to the store for reducers to change the state accordingly
     * @param  {string} actionType
     * @param  {any} payload?
     * @returns void
     */
    dispatch(actionType: string, payload?: any): void;
    /**
     * Selects a state from the store using a selector function (e.g. (state) => state.myState)
     * @param  {(state:any)=>any} selector
     * @returns Observable
     */
    stateSelector(selector: (state: any) => any): Observable<any>;
    /**
     * Sets the initial state of the store with a custom state
     *
     * NOTE: Any state attributes provided in the state object parameter should be identical to the reducer names that were set in addReducer()
     *
     * addReducer has to be used to initialise the reducers before using this function
     * @param  {any} state
     * @returns void
     */
    setStoreInitialState(state: any): void;
    /**
     * Links AGSM to the AGSM Dev Tools extension to debug application's state
     * @param  {boolean} activate
     * @returns void
     */
    linkDevTools(activate: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AgsmService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AgsmService>;
}
