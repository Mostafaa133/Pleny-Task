import * as i0 from '@angular/core';
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';

/// <reference types="chrome"/>
class AgsmService {
    constructor() {
        this.store = {};
        this.id = 0;
        this.devToolsId = () => `agsm${Date.now().toString(36) + Math.random().toString(36).substr(2)}-dispatch${this.id++}`;
        this.devToolsLink = false;
        /* For future use */
        this.stateMap = {};
        this.actionMap = {};
        this._store = new BehaviorSubject({});
    }
    /**
     * Adds a new reducer to the store
     * @param  {string} reducerName
     * @param  {(action:Action,initialState?:any)=>{}} reducerFunc
     * @returns void
     */
    addReducer(reducerName, reducerFunc) {
        if (this.store[reducerName]) {
            throw new Error('Cannot have duplicate reducer names in store.');
        }
        const initialState = reducerFunc({ type: 'AGSM_INIT', payload: {} });
        if (typeof initialState !== 'object') {
            throw new Error('Initial state must be an object');
        }
        this.store[reducerName] = {
            dispatcher: reducerFunc,
            state: initialState,
            reducer: new BehaviorSubject(initialState),
        };
    }
    /**
     * Dispatches actions to the store for reducers to change the state accordingly
     * @param  {string} actionType
     * @param  {any} payload?
     * @returns void
     */
    dispatch(actionType, payload) {
        const action = {
            type: actionType,
            payload: payload !== null && payload !== void 0 ? payload : {},
        };
        if (this.devToolsLink && Object.keys(action.payload).length <= 0) {
            try {
                chrome.runtime.sendMessage('ejpcjcmhahncbieoipffmamnedfhghld', {
                    type: 'agsm_event',
                    agsmEvent: actionType,
                    id: this.devToolsId(),
                    content: {},
                });
            }
            catch (e) {
                throw new Error('Make sure AGSM Dev Tools extension is installed or pass a false boolean to linkDevTools() to de-activate debugging');
            }
        }
        // Begin dispatching to all reducers & check for changes before broadcasting
        for (const key of Object.keys(this.store)) {
            const oldState = this.store[key].state; // For performance reasons
            this.store[key].state = this.store[key].dispatcher(action, this.store[key].state);
            // Check for object equality so we don't broadcast all the time
            let equals = true;
            for (const _key of Object.keys(this.store[key].state)) {
                if (_key in oldState && _key in this.store[key].state) {
                    if (oldState[_key] !== this.store[key].state[_key]) {
                        equals = false;
                        break;
                    }
                }
                else {
                    equals = false;
                    break;
                }
            }
            if (!equals) {
                this.store[key].reducer.next(this.store[key].state);
                if (this.devToolsLink) {
                    try {
                        chrome.runtime.sendMessage('ejpcjcmhahncbieoipffmamnedfhghld', {
                            type: 'agsm_event',
                            agsmEvent: actionType,
                            id: this.devToolsId(),
                            content: Object.keys(this.store[key].state).length > 0
                                ? { state: this.store[key].state }
                                : {},
                        });
                    }
                    catch (e) {
                        throw new Error('Make sure AGSM Dev Tools extension is installed or pass a false boolean to linkDevTools() to de-activate debugging');
                    }
                }
            }
        }
    }
    /**
     * Selects a state from the store using a selector function (e.g. (state) => state.myState)
     * @param  {(state:any)=>any} selector
     * @returns Observable
     */
    stateSelector(selector) {
        const selectedState = selector(this.store);
        if (!selectedState)
            throw new Error('Selected reducer does not exist in agsm store');
        return selectedState.reducer.asObservable().pipe(map((state) => {
            return JSON.parse(JSON.stringify(state));
        }));
    }
    /**
     * Sets the initial state of the store with a custom state
     *
     * NOTE: Any state attributes provided in the state object parameter should be identical to the reducer names that were set in addReducer()
     *
     * addReducer has to be used to initialise the reducers before using this function
     * @param  {any} state
     * @returns void
     */
    setStoreInitialState(state) {
        if (Object.keys(state).length <= 0)
            return;
        for (const key of Object.keys(state)) {
            if (!(key in this.store)) {
                throw new Error('Cannot set state for states outside of the store object');
            }
            const newReducerState = state[key];
            if (typeof newReducerState !== 'object') {
                throw new Error('Initial states must be objects');
            }
            this.store[key].state = newReducerState;
            this.store[key].reducer.next(this.store[key].state);
        }
    }
    /**
     * Links AGSM to the AGSM Dev Tools extension to debug application's state
     * @param  {boolean} activate
     * @returns void
     */
    linkDevTools(activate) {
        this.devToolsLink = activate;
    }
}
AgsmService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AgsmService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AgsmService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AgsmService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AgsmService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });

/*
 * Public API Surface of agsm
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AgsmService };
//# sourceMappingURL=agsm.js.map
