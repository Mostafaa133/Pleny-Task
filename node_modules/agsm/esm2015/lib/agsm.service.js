/// <reference types="chrome"/>
/// <reference types="chrome"/>
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class AgsmService {
    constructor() {
        this.store = {};
        this.id = 0;
        this.devToolsId = () => `agsm${Date.now().toString(36) + Math.random().toString(36).substr(2)}-dispatch${this.id++}`;
        this.devToolsLink = false;
        /* For future use */
        this.stateMap = {};
        this.actionMap = {};
        this._store = new BehaviorSubject({});
    }
    /**
     * Adds a new reducer to the store
     * @param  {string} reducerName
     * @param  {(action:Action,initialState?:any)=>{}} reducerFunc
     * @returns void
     */
    addReducer(reducerName, reducerFunc) {
        if (this.store[reducerName]) {
            throw new Error('Cannot have duplicate reducer names in store.');
        }
        const initialState = reducerFunc({ type: 'AGSM_INIT', payload: {} });
        if (typeof initialState !== 'object') {
            throw new Error('Initial state must be an object');
        }
        this.store[reducerName] = {
            dispatcher: reducerFunc,
            state: initialState,
            reducer: new BehaviorSubject(initialState),
        };
    }
    /**
     * Dispatches actions to the store for reducers to change the state accordingly
     * @param  {string} actionType
     * @param  {any} payload?
     * @returns void
     */
    dispatch(actionType, payload) {
        const action = {
            type: actionType,
            payload: payload !== null && payload !== void 0 ? payload : {},
        };
        if (this.devToolsLink && Object.keys(action.payload).length <= 0) {
            try {
                chrome.runtime.sendMessage('ejpcjcmhahncbieoipffmamnedfhghld', {
                    type: 'agsm_event',
                    agsmEvent: actionType,
                    id: this.devToolsId(),
                    content: {},
                });
            }
            catch (e) {
                throw new Error('Make sure AGSM Dev Tools extension is installed or pass a false boolean to linkDevTools() to de-activate debugging');
            }
        }
        // Begin dispatching to all reducers & check for changes before broadcasting
        for (const key of Object.keys(this.store)) {
            const oldState = this.store[key].state; // For performance reasons
            this.store[key].state = this.store[key].dispatcher(action, this.store[key].state);
            // Check for object equality so we don't broadcast all the time
            let equals = true;
            for (const _key of Object.keys(this.store[key].state)) {
                if (_key in oldState && _key in this.store[key].state) {
                    if (oldState[_key] !== this.store[key].state[_key]) {
                        equals = false;
                        break;
                    }
                }
                else {
                    equals = false;
                    break;
                }
            }
            if (!equals) {
                this.store[key].reducer.next(this.store[key].state);
                if (this.devToolsLink) {
                    try {
                        chrome.runtime.sendMessage('ejpcjcmhahncbieoipffmamnedfhghld', {
                            type: 'agsm_event',
                            agsmEvent: actionType,
                            id: this.devToolsId(),
                            content: Object.keys(this.store[key].state).length > 0
                                ? { state: this.store[key].state }
                                : {},
                        });
                    }
                    catch (e) {
                        throw new Error('Make sure AGSM Dev Tools extension is installed or pass a false boolean to linkDevTools() to de-activate debugging');
                    }
                }
            }
        }
    }
    /**
     * Selects a state from the store using a selector function (e.g. (state) => state.myState)
     * @param  {(state:any)=>any} selector
     * @returns Observable
     */
    stateSelector(selector) {
        const selectedState = selector(this.store);
        if (!selectedState)
            throw new Error('Selected reducer does not exist in agsm store');
        return selectedState.reducer.asObservable().pipe(map((state) => {
            return JSON.parse(JSON.stringify(state));
        }));
    }
    /**
     * Sets the initial state of the store with a custom state
     *
     * NOTE: Any state attributes provided in the state object parameter should be identical to the reducer names that were set in addReducer()
     *
     * addReducer has to be used to initialise the reducers before using this function
     * @param  {any} state
     * @returns void
     */
    setStoreInitialState(state) {
        if (Object.keys(state).length <= 0)
            return;
        for (const key of Object.keys(state)) {
            if (!(key in this.store)) {
                throw new Error('Cannot set state for states outside of the store object');
            }
            const newReducerState = state[key];
            if (typeof newReducerState !== 'object') {
                throw new Error('Initial states must be objects');
            }
            this.store[key].state = newReducerState;
            this.store[key].reducer.next(this.store[key].state);
        }
    }
    /**
     * Links AGSM to the AGSM Dev Tools extension to debug application's state
     * @param  {boolean} activate
     * @returns void
     */
    linkDevTools(activate) {
        this.devToolsLink = activate;
    }
}
AgsmService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AgsmService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AgsmService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AgsmService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AgsmService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdzbS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYWdzbS9zcmMvbGliL2Fnc20uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUFBL0IsK0JBQStCO0FBRS9CLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBTXJDLE1BQU0sT0FBTyxXQUFXO0lBYXRCO1FBWlEsVUFBSyxHQUFRLEVBQUUsQ0FBQztRQUNoQixPQUFFLEdBQVcsQ0FBQyxDQUFDO1FBQ2YsZUFBVSxHQUFHLEdBQUcsRUFBRSxDQUN4QixPQUNFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUMvRCxZQUFZLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2xCLGlCQUFZLEdBQVksS0FBSyxDQUFDO1FBQ3RDLG9CQUFvQjtRQUNaLGFBQVEsR0FBUSxFQUFFLENBQUM7UUFDbkIsY0FBUyxHQUFRLEVBQUUsQ0FBQztRQUNwQixXQUFNLEdBQUcsSUFBSSxlQUFlLENBQU0sRUFBRSxDQUFDLENBQUM7SUFFL0IsQ0FBQztJQUVoQjs7Ozs7T0FLRztJQUNILFVBQVUsQ0FDUixXQUFtQixFQUNuQixXQUF1RDtRQUV2RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLFdB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QUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQ2IseURBQXlELENBQzFELENBQUM7YUFDSDtZQUVELE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxJQUFJLE9BQU8sZUFBZSxLQUFLLFFBQVEsRUFBRTtnQkFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO2FBQ25EO1lBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxZQUFZLENBQUMsUUFBaUI7UUFDNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUM7SUFDL0IsQ0FBQzs7eUdBdktVLFdBQVc7NkdBQVgsV0FBVyxjQUZWLE1BQU07NEZBRVAsV0FBVztrQkFIdkIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cImNocm9tZVwiLz5cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuLi9tb2RlbHMvYWN0aW9uLm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEFnc21TZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdG9yZTogYW55ID0ge307XG4gIHByaXZhdGUgaWQ6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgZGV2VG9vbHNJZCA9ICgpID0+XG4gICAgYGFnc20ke1xuICAgICAgRGF0ZS5ub3coKS50b1N0cmluZygzNikgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMilcbiAgICB9LWRpc3BhdGNoJHt0aGlzLmlkKyt9YDtcbiAgcHJpdmF0ZSBkZXZUb29sc0xpbms6IGJvb2xlYW4gPSBmYWxzZTtcbiAgLyogRm9yIGZ1dHVyZSB1c2UgKi9cbiAgcHJpdmF0ZSBzdGF0ZU1hcDogYW55ID0ge307XG4gIHByaXZhdGUgYWN0aW9uTWFwOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBfc3RvcmUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4oe30pO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogQWRkcyBhIG5ldyByZWR1Y2VyIHRvIHRoZSBzdG9yZVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHJlZHVjZXJOYW1lXG4gICAqIEBwYXJhbSAgeyhhY3Rpb246QWN0aW9uLGluaXRpYWxTdGF0ZT86YW55KT0+e319IHJlZHVjZXJGdW5jXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIGFkZFJlZHVjZXIoXG4gICAgcmVkdWNlck5hbWU6IHN0cmluZyxcbiAgICByZWR1Y2VyRnVuYzogKGFjdGlvbjogQWN0aW9uLCBpbml0aWFsU3RhdGU/OiBhbnkpID0+IHt9XG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN0b3JlW3JlZHVjZXJOYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGF2ZSBkdXBsaWNhdGUgcmVkdWNlciBuYW1lcyBpbiBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSByZWR1Y2VyRnVuYyh7IHR5cGU6ICdBR1NNX0lOSVQnLCBwYXlsb2FkOiB7fSB9KTtcbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW5pdGlhbCBzdGF0ZSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cblxuICAgIHRoaXMuc3RvcmVbcmVkdWNlck5hbWVdID0ge1xuICAgICAgZGlzcGF0Y2hlcjogcmVkdWNlckZ1bmMsXG4gICAgICBzdGF0ZTogaW5pdGlhbFN0YXRlLFxuICAgICAgcmVkdWNlcjogbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KGluaXRpYWxTdGF0ZSksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFjdGlvbnMgdG8gdGhlIHN0b3JlIGZvciByZWR1Y2VycyB0byBjaGFuZ2UgdGhlIHN0YXRlIGFjY29yZGluZ2x5XG4gICAqIEBwYXJhbSAge3N0cmluZ30gYWN0aW9uVHlwZVxuICAgKiBAcGFyYW0gIHthbnl9IHBheWxvYWQ/XG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIGRpc3BhdGNoKGFjdGlvblR5cGU6IHN0cmluZywgcGF5bG9hZD86IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IGFjdGlvbjogQWN0aW9uID0ge1xuICAgICAgdHlwZTogYWN0aW9uVHlwZSxcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQgPz8ge30sXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmRldlRvb2xzTGluayAmJiBPYmplY3Qua2V5cyhhY3Rpb24ucGF5bG9hZCkubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKCdlanBjamNtaGFobmNiaWVvaXBmZm1hbW5lZGZoZ2hsZCcsIHtcbiAgICAgICAgICB0eXBlOiAnYWdzbV9ldmVudCcsXG4gICAgICAgICAgYWdzbUV2ZW50OiBhY3Rpb25UeXBlLFxuICAgICAgICAgIGlkOiB0aGlzLmRldlRvb2xzSWQoKSxcbiAgICAgICAgICBjb250ZW50OiB7fSxcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdNYWtlIHN1cmUgQUdTTSBEZXYgVG9vbHMgZXh0ZW5zaW9uIGlzIGluc3RhbGxlZCBvciBwYXNzIGEgZmFsc2UgYm9vbGVhbiB0byBsaW5rRGV2VG9vbHMoKSB0byBkZS1hY3RpdmF0ZSBkZWJ1Z2dpbmcnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQmVnaW4gZGlzcGF0Y2hpbmcgdG8gYWxsIHJlZHVjZXJzICYgY2hlY2sgZm9yIGNoYW5nZXMgYmVmb3JlIGJyb2FkY2FzdGluZ1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuc3RvcmUpKSB7XG4gICAgICBjb25zdCBvbGRTdGF0ZSA9IHRoaXMuc3RvcmVba2V5XS5zdGF0ZTsgLy8gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgICAgIHRoaXMuc3RvcmVba2V5XS5zdGF0ZSA9IHRoaXMuc3RvcmVba2V5XS5kaXNwYXRjaGVyKFxuICAgICAgICBhY3Rpb24sXG4gICAgICAgIHRoaXMuc3RvcmVba2V5XS5zdGF0ZVxuICAgICAgKTtcblxuICAgICAgLy8gQ2hlY2sgZm9yIG9iamVjdCBlcXVhbGl0eSBzbyB3ZSBkb24ndCBicm9hZGNhc3QgYWxsIHRoZSB0aW1lXG4gICAgICBsZXQgZXF1YWxzID0gdHJ1ZTtcbiAgICAgIGZvciAoY29uc3QgX2tleSBvZiBPYmplY3Qua2V5cyh0aGlzLnN0b3JlW2tleV0uc3RhdGUpKSB7XG4gICAgICAgIGlmIChfa2V5IGluIG9sZFN0YXRlICYmIF9rZXkgaW4gdGhpcy5zdG9yZVtrZXldLnN0YXRlKSB7XG4gICAgICAgICAgaWYgKG9sZFN0YXRlW19rZXldICE9PSB0aGlzLnN0b3JlW2tleV0uc3RhdGVbX2tleV0pIHtcbiAgICAgICAgICAgIGVxdWFscyA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVxdWFscyA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghZXF1YWxzKSB7XG4gICAgICAgIHRoaXMuc3RvcmVba2V5XS5yZWR1Y2VyLm5leHQodGhpcy5zdG9yZVtrZXldLnN0YXRlKTtcblxuICAgICAgICBpZiAodGhpcy5kZXZUb29sc0xpbmspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoJ2VqcGNqY21oYWhuY2JpZW9pcGZmbWFtbmVkZmhnaGxkJywge1xuICAgICAgICAgICAgICB0eXBlOiAnYWdzbV9ldmVudCcsXG4gICAgICAgICAgICAgIGFnc21FdmVudDogYWN0aW9uVHlwZSxcbiAgICAgICAgICAgICAgaWQ6IHRoaXMuZGV2VG9vbHNJZCgpLFxuICAgICAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuc3RvcmVba2V5XS5zdGF0ZSkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgPyB7IHN0YXRlOiB0aGlzLnN0b3JlW2tleV0uc3RhdGUgfVxuICAgICAgICAgICAgICAgICAgOiB7fSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAnTWFrZSBzdXJlIEFHU00gRGV2IFRvb2xzIGV4dGVuc2lvbiBpcyBpbnN0YWxsZWQgb3IgcGFzcyBhIGZhbHNlIGJvb2xlYW4gdG8gbGlua0RldlRvb2xzKCkgdG8gZGUtYWN0aXZhdGUgZGVidWdnaW5nJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0cyBhIHN0YXRlIGZyb20gdGhlIHN0b3JlIHVzaW5nIGEgc2VsZWN0b3IgZnVuY3Rpb24gKGUuZy4gKHN0YXRlKSA9PiBzdGF0ZS5teVN0YXRlKVxuICAgKiBAcGFyYW0gIHsoc3RhdGU6YW55KT0+YW55fSBzZWxlY3RvclxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlXG4gICAqL1xuICBzdGF0ZVNlbGVjdG9yKHNlbGVjdG9yOiAoc3RhdGU6IGFueSkgPT4gYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3IodGhpcy5zdG9yZSk7XG4gICAgaWYgKCFzZWxlY3RlZFN0YXRlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWxlY3RlZCByZWR1Y2VyIGRvZXMgbm90IGV4aXN0IGluIGFnc20gc3RvcmUnKTtcblxuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlLnJlZHVjZXIuYXNPYnNlcnZhYmxlKCkucGlwZShcbiAgICAgIG1hcCgoc3RhdGU6IGFueSkgPT4ge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIHN0b3JlIHdpdGggYSBjdXN0b20gc3RhdGVcbiAgICpcbiAgICogTk9URTogQW55IHN0YXRlIGF0dHJpYnV0ZXMgcHJvdmlkZWQgaW4gdGhlIHN0YXRlIG9iamVjdCBwYXJhbWV0ZXIgc2hvdWxkIGJlIGlkZW50aWNhbCB0byB0aGUgcmVkdWNlciBuYW1lcyB0aGF0IHdlcmUgc2V0IGluIGFkZFJlZHVjZXIoKVxuICAgKlxuICAgKiBhZGRSZWR1Y2VyIGhhcyB0byBiZSB1c2VkIHRvIGluaXRpYWxpc2UgdGhlIHJlZHVjZXJzIGJlZm9yZSB1c2luZyB0aGlzIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSAge2FueX0gc3RhdGVcbiAgICogQHJldHVybnMgdm9pZFxuICAgKi9cbiAgc2V0U3RvcmVJbml0aWFsU3RhdGUoc3RhdGU6IGFueSk6IHZvaWQge1xuICAgIGlmIChPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoIDw9IDApIHJldHVybjtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0YXRlKSkge1xuICAgICAgaWYgKCEoa2V5IGluIHRoaXMuc3RvcmUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQ2Fubm90IHNldCBzdGF0ZSBmb3Igc3RhdGVzIG91dHNpZGUgb2YgdGhlIHN0b3JlIG9iamVjdCdcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3UmVkdWNlclN0YXRlID0gc3RhdGVba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgbmV3UmVkdWNlclN0YXRlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luaXRpYWwgc3RhdGVzIG11c3QgYmUgb2JqZWN0cycpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0b3JlW2tleV0uc3RhdGUgPSBuZXdSZWR1Y2VyU3RhdGU7XG4gICAgICB0aGlzLnN0b3JlW2tleV0ucmVkdWNlci5uZXh0KHRoaXMuc3RvcmVba2V5XS5zdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpbmtzIEFHU00gdG8gdGhlIEFHU00gRGV2IFRvb2xzIGV4dGVuc2lvbiB0byBkZWJ1ZyBhcHBsaWNhdGlvbidzIHN0YXRlXG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IGFjdGl2YXRlXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIGxpbmtEZXZUb29scyhhY3RpdmF0ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuZGV2VG9vbHNMaW5rID0gYWN0aXZhdGU7XG4gIH1cblxuICAvKiBERVBSRUNBVEVEICovXG5cbiAgLy8gICBzZXRSZWR1Y2VyU3RhdGUoXG4gIC8vICAgICBzZWxlY3RvcjogKHN0YXRlOiBhbnkpID0+IGFueSxcbiAgLy8gICAgIHN0YXRlOiBhbnksXG4gIC8vICAgICB1cGRhdGU6IGJvb2xlYW5cbiAgLy8gICApOiB2b2lkIHtcbiAgLy8gICAgIGNvbnN0IGN1cnJTdGF0ZSA9IHNlbGVjdG9yKHRoaXMuc3RvcmUpO1xuICAvLyAgICAgaWYgKCFjdXJyU3RhdGUpIHtcbiAgLy8gICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIG5vdCBmb3VuZCBpbiBzdG9yZScpO1xuICAvLyAgICAgfVxuICAvLyAgICAgY3VyclN0YXRlLnN0YXRlID0gc3RhdGU7XG4gIC8vICAgICBpZiAodXBkYXRlKSB7XG4gIC8vICAgICAgIGN1cnJTdGF0ZS5yZWR1Y2VyLm5leHQoc3RhdGUpO1xuICAvLyAgICAgfVxuICAvLyAgIH1cblxuICAvLyAgIGdldFN0YXRlVmFsdWUoc2VsZWN0b3I6IChzdGF0ZTogYW55KSA9PiBhbnkpOiB2b2lkIHtcbiAgLy8gICAgIGNvbnN0IGN1cnJTdGF0ZSA9IHNlbGVjdG9yKHRoaXMuc3RvcmUpO1xuICAvLyAgICAgY3VyclN0YXRlLnJlZHVjZXIubmV4dChjdXJyU3RhdGUuc3RhdGUpO1xuICAvLyAgIH1cbn1cbiJdfQ==